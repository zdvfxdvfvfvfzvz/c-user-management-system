# Customer Review Management System
**User Management System in C - Final Project**

## üéØ Project Overview
A complete review management system featuring **Levenshtein Distance** algorithm for intelligent typo correction, Thai Buddhist Era date support, and comprehensive CRUD operations with undo functionality.

---

## ‚ú® Key Features

### 1. **Intelligent Typo Correction (Levenshtein Distance Algorithm)**
The system uses edit distance calculation to find reviews even with typos!

**Try These Searches:**
- Search `"jhon"` ‚Üí Finds "John Smith" ‚úì
- Search `"sara"` ‚Üí Finds "Sarah Johnson" ‚úì
- Search `"michel"` ‚Üí Finds "Michael Brown" ‚úì
- Search `"emly"` ‚Üí Finds "Emily Davis" ‚úì

**How It Works:**
```
editDistance("kitten", "sitting") = 3 edits
  k ‚Üí s (substitute)
  e ‚Üí i (substitute)  
  insert t
```

- **Distance 0** = Exact match ‚≠ê
- **Distance 1-2** = Close match (likely typo) üîç
- **Distance 3** = Similar name (fuzzy match) üí°
- Uses dynamic programming with 2D matrix (O(m√ón) complexity)

**Algorithm Implementation:**
```c
int editDistance(const char* str1, const char* str2) {
    // Creates matrix dp[len1+1][len2+1]
    // dp[i][j] = min edits to transform str1[0..i] to str2[0..j]
    // Returns dp[len1][len2]
}
```

### 2. **Thai Buddhist Era (‡∏û.‡∏®.) Support**
Accepts both Gregorian (CE) and Buddhist Era (BE) dates!

**Valid Date Examples:**
- `2025-12-25` (CE) ‚úì
- `2568-12-25` (BE = 2025 + 543) ‚úì
- `2400-2700` (BE range) ‚úì
- `1900-2100` (CE range) ‚úì

**Invalid Dates Rejected:**
- `2568-13-01` (month > 12) ‚úó
- `2025-02-30` (invalid day) ‚úó
- `9999-99-99` (out of range) ‚úó

### 3. **Complete CRUD Operations**

#### Create (Add Review)
- Name validation (max 50 chars)
- Score validation (1-5 only)
- Date validation with format checking
- Feedback with length limits (max 200 chars)
- Dynamic array resizing (capacity doubles when full)

#### Read (Display & Search)
- Display all reviews with pagination
- **Search by name** (with typo correction!)
- **Search by score range** (e.g., 4-5 stars)
- **Search by date** (exact match)
- Statistical analysis with bar charts

#### Update
- Update individual fields (name, score, date, feedback)
- Update all fields at once
- Preview before confirming changes

#### Delete
- Delete by name (with typo matching!)
- Delete by selection from list
- Delete all reviews by a user
- **Double confirmation** (y/n + "DELETE")
- **Undo last delete** feature!

### 4. **Advanced Features**

**Statistics Dashboard:**
```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           üìä Statistics                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
Total Reviews: 10
Average Score: 4.2/5

Score Distribution:
5 ‚≠ê ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà (5)
4 ‚≠ê ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà (3)
3 ‚≠ê ‚ñà‚ñà‚ñà‚ñà (2)
2 ‚≠ê ‚ñë‚ñë‚ñë‚ñë (0)
1 ‚≠ê ‚ñë‚ñë‚ñë‚ñë (0)
```

**Backup & Restore:**
- Automatic timestamped backups: `backup_20240315_143025.csv`
- Custom backup names
- Restore from any backup file
- Warning before overwriting current data

**Undo Functionality:**
- Saves last deleted review in memory
- Can restore to original position
- One-level undo (most recent delete only)
- Memory cleaned up properly

**Memory Management:**
- Dynamic array allocation with `malloc()`
- Automatic resizing with `realloc()`
- Proper memory cleanup with `free()`
- No memory leaks (validated with testing)

## üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á (Files to Submit)

‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 4 ‡πÑ‡∏ü‡∏•‡πå:

### 1. ‚úÖ File project (main.c)
- `main.c` - ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (1,000+ lines)
- ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô CRUD, search with typo correction, statistics, backup/restore, undo
- ‡πÉ‡∏ä‡πâ Levenshtein Distance algorithm

### 2. ‚úÖ File CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (reviews.csv)
- `reviews.csv` - ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
- ‡∏°‡∏µ header: ReviewerName, SatisfactionScore, ReviewDate, Feedback
- ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

### 3. ‚úÖ File unit test ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (unit_test.c)
- `unit_test.c` - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÜ ‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (500+ lines)
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: min3, editDistance, toLowerCase, trim_whitespace, is_valid_date, parseScore, allocate_string
- ‡∏£‡∏ß‡∏° 60+ test cases

### 4. ‚úÖ File E2E test (e2e_test.c)
- `e2e_test.c` - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö end-to-end (600+ lines)
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: CSV operations, search, delete, update, backup, statistics
- ‡∏£‡∏ß‡∏° 40+ test cases

---

## üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Compile ‡πÅ‡∏•‡∏∞ Run

### ‡πÉ‡∏ä‡πâ Makefile (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‚≠ê)

```bash
# 1. Compile ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
make
./review_system

# 2. Compile ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô unit tests
make test

# 3. Compile ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô E2E tests
make e2e

# 4. ‡∏£‡∏±‡∏ô tests ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
make test-all

# 5. Compile ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (main + tests)
make build-all

# 6. ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
make run

# 7. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà compile ‡πÅ‡∏•‡πâ‡∏ß
make clean

# 8. ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ executables
make clean-all

# 9. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
make help
```

### Compile ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

```bash
# Compile main program
gcc -Wall -Wextra -g -o review_system main.c -lm

# Compile unit tests
gcc -Wall -Wextra -g -o unit_test unit_test.c -lm

# Compile E2E tests
gcc -Wall -Wextra -g -o e2e_test e2e_test.c -lm

# ‡∏£‡∏±‡∏ô
./review_system
./unit_test
./e2e_test
```

**Compiler Flags:**
- `-Wall` - ‡πÅ‡∏™‡∏î‡∏á warnings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
- `-Wextra` - ‡πÅ‡∏™‡∏î‡∏á warnings ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
- `-g` - ‡∏£‡∏ß‡∏° debugging information
- `-lm` - link ‡∏Å‡∏±‡∏ö math library

---

## üß™ Testing & Quality Assurance

### Unit Tests (60+ Test Cases)

```bash
make test
```

**Coverage:**
```
=== Testing min3() ===
‚úì PASS: min3(1,2,3) should return 1
‚úì PASS: min3(3,2,1) should return 1
...

=== Testing editDistance() ===
‚úì PASS: kitten -> sitting = 3 edits
‚úì PASS: john -> jhon = 2 edits
‚úì PASS: hello -> hello = 0 edits
...

=== Testing toLowerCase() ===
‚úì PASS: HELLO -> hello
‚úì PASS: MiXeD CaSe -> mixed case
...

Total Tests:  60
‚úì Passed:     60
‚úó Failed:     0
```

**‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:**
| Function | Tests | Purpose |
|----------|-------|---------|
| `min3()` | 6 | ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç |
| `editDistance()` | 10 | Levenshtein Distance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö typo correction |
| `toLowerCase()` | 6 | ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å (case-insensitive search) |
| `trim_whitespace()` | 5 | ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á |
| `is_valid_date()` | 16 | ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (CE/BE support) |
| `parseScore()` | 12 | ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô integer score |
| `allocate_string()` | 4 | ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÅ‡∏ö‡∏ö dynamic |
| **Edge Cases** | 5+ | ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏© |

### E2E Tests (40+ Test Cases)

```bash
make e2e
```

**Integration Testing:**
```
=== Test: CSV Creation and Loading ===
‚úì PASS: Test CSV file created successfully
‚úì PASS: CSV has correct number of lines

=== Test: CSV with Commas in Feedback ===
‚úì PASS: Feedback with commas preserved
‚úì PASS: Full feedback maintained

=== Test: Search Functionality ===
‚úì PASS: Exact name search works
‚úì PASS: Case-insensitive search works
...

Total Tests:  42
‚úì Passed:     42
‚úó Failed:     0
```

**‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:**
- ‚úÖ CSV file operations (create, read, parse)
- ‚úÖ CSV with special characters and commas
- ‚úÖ Data validation (dates, scores, names)
- ‚úÖ Search with typo correction
- ‚úÖ CRUD operations (Create, Read, Update, Delete)
- ‚úÖ Backup and restore functionality
- ‚úÖ Statistics calculation
- ‚úÖ Memory management and leaks
- ‚úÖ Edge cases and boundary values
- ‚úÖ File I/O error handling

---

**Note:** CSV ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö commas ‡πÉ‡∏ô feedback field ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `strtok(NULL, "")` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

---

## üî¨ Technical Implementation

### 1. Levenshtein Distance Algorithm

**Time Complexity:** O(m √ó n) where m, n are string lengths  
**Space Complexity:** O(m √ó n) for DP matrix

```c
int editDistance(const char* str1, const char* str2) {
    // Allocate 2D DP matrix
    int **dp = (int**)malloc((len1 + 1) * sizeof(int*));
    
    // Initialize base cases
    dp[i][0] = i;  // Delete all chars from str1
    dp[0][j] = j;  // Insert all chars from str2
    
    // Fill DP table
    for (int i = 1; i <= len1; i++) {
        for (int j = 1; j <= len2; j++) {
            if (tolower(str1[i-1]) == tolower(str2[j-1])) {
                dp[i][j] = dp[i-1][j-1];  // No operation needed
            } else {
                dp[i][j] = 1 + min3(
                    dp[i-1][j],      // Delete
                    dp[i][j-1],      // Insert
                    dp[i-1][j-1]     // Replace
                );
            }
        }
    }
    
    return dp[len1][len2];
}
```

**Example Calculation:**
```
Transform "kitten" ‚Üí "sitting"

    ""  s  i  t  t  i  n  g
""   0  1  2  3  4  5  6  7
k    1  1  2  3  4  5  6  7
i    2  2  1  2  3  4  5  6
t    3  3  2  1  2  3  4  5
t    4  4  3  2  1  2  3  4
e    5  5  4  3  2  2  3  4
n    6  6  5  4  3  3  2  3

Result: dp[6][7] = 3 edits
```

### 2. Dynamic Memory Management

```c
typedef struct {
    char *reviewer_name;      // Dynamically allocated
    int satisfaction_score;
    char *review_date;        // Dynamically allocated
    char *feedback;           // Dynamically allocated
} Review;

// Global dynamic array
Review *reviews = NULL;
int review_count = 0;
int capacity = 0;

// Initialize with capacity 5
void initialize_system() {
    capacity = 5;
    reviews = (Review*)malloc(capacity * sizeof(Review));
}

// Auto-resize when full (double capacity)
void resize_review_array() {
    capacity *= 2;
    reviews = (Review*)realloc(reviews, capacity * sizeof(Review));
}
```

**Memory Lifecycle:**
1. **Allocate:** `malloc()` for initial array
2. **Resize:** `realloc()` when capacity reached
3. **Free strings:** Individual field cleanup
4. **Free array:** Main array cleanup
5. **No leaks:** All allocations freed properly

### 3. CSV Parsing with Comma Support

```c
// Handle commas in feedback field
char *reviewer_name = strtok(line, ",");
char *score_str = strtok(NULL, ",");
char *review_date = strtok(NULL, ",");
char *feedback = strtok(NULL, "");  // Get rest of line!

// This allows:
// John,5,2024-01-01,Great product, fast delivery, excellent!
//                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//                    Preserves all commas in feedback
```

### 4. Search with Typo Tolerance

```c
SearchResult* searchWithTypoCorrection(const char* query, 
                                      int* resultCount, 
                                      int maxDistance) {
    for (int i = 0; i < review_count; i++) {
        int distance = editDistance(query, reviews[i].reviewer_name);
        
        if (distance <= maxDistance) {
            results[*resultCount].index = i;
            results[*resultCount].distance = distance;
            
            if (distance == 0)      strcpy(matchType, "exact");
            else if (distance <= 2) strcpy(matchType, "close");
            else                    strcpy(matchType, "fuzzy");
            
            (*resultCount)++;
        }
    }
    
    // Sort by distance (best matches first)
    sort_results_by_distance(results, *resultCount);
    return results;
}
```

---

## üéØ Menu System

```
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    Customer Review Management System   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
1. Add Review
2. Display All Reviews
3. Search Reviews
   ‚îî‚îÄ 3.1 By name (typo correction)
   ‚îî‚îÄ 3.2 By score range (1-5)
   ‚îî‚îÄ 3.3 By date (YYYY-MM-DD)
4. Update Review
   ‚îî‚îÄ 4.1 Update name
   ‚îî‚îÄ 4.2 Update score
   ‚îî‚îÄ 4.3 Update date
   ‚îî‚îÄ 4.4 Update feedback
   ‚îî‚îÄ 4.5 Update all fields
5. Delete Review
   ‚îî‚îÄ 5.1 Delete by name
   ‚îî‚îÄ 5.2 Delete by selection
   ‚îî‚îÄ 5.3 Delete all by user
6. Statistics
   ‚îî‚îÄ Total reviews
   ‚îî‚îÄ Average score
   ‚îî‚îÄ Score distribution (bar chart)
7. Backup/Restore
   ‚îî‚îÄ 7.1 Create backup
   ‚îî‚îÄ 7.2 Restore from backup
8. Undo Last Delete
9. Save & Exit
```

---

## üìÇ Project Structure

```
project/
‚îú‚îÄ‚îÄ main.c              # Main program (1,000+ lines)
‚îÇ   ‚îú‚îÄ‚îÄ Data structures (Review, SearchResult)
‚îÇ   ‚îú‚îÄ‚îÄ CRUD operations
‚îÇ   ‚îú‚îÄ‚îÄ Search with typo correction
‚îÇ   ‚îú‚îÄ‚îÄ Statistics
‚îÇ   ‚îú‚îÄ‚îÄ Backup/Restore
‚îÇ   ‚îî‚îÄ‚îÄ Memory management
‚îÇ
‚îú‚îÄ‚îÄ reviews.csv         # Sample data (10 reviews)
‚îÇ
‚îú‚îÄ‚îÄ unit_test.c         # Unit tests (500+ lines)
‚îÇ   ‚îú‚îÄ‚îÄ Algorithm tests (editDistance, min3)
‚îÇ   ‚îú‚îÄ‚îÄ String manipulation tests
‚îÇ   ‚îú‚îÄ‚îÄ Validation tests (date, score)
‚îÇ   ‚îî‚îÄ‚îÄ Memory tests
‚îÇ
‚îú‚îÄ‚îÄ e2e_test.c          # E2E tests (600+ lines)
‚îÇ   ‚îú‚îÄ‚îÄ File I/O tests
‚îÇ   ‚îú‚îÄ‚îÄ Integration tests
‚îÇ   ‚îú‚îÄ‚îÄ CRUD operation tests
‚îÇ   ‚îî‚îÄ‚îÄ Edge case tests
‚îÇ
‚îú‚îÄ‚îÄ Makefile            # Build automation
‚îÇ   ‚îú‚îÄ‚îÄ Compilation targets
‚îÇ   ‚îú‚îÄ‚îÄ Testing targets
‚îÇ   ‚îî‚îÄ‚îÄ Cleanup targets
‚îÇ
‚îî‚îÄ‚îÄ README.md           # This file
```

---

## üîí Input Validation

### Name Validation
```c
- Length: 1-50 characters
- Cannot be empty
- Whitespace trimmed
```

### Score Validation
```c
- Range: 1-5 only
- Must be integer
- Non-numeric rejected
```

### Date Validation
```c
- Format: YYYY-MM-DD (exactly 10 chars)
- Separators: Must be '-'
- Year: 1900-2100 (CE) or 2400-2700 (BE)
- Month: 01-12
- Day: 01-31 (respects days in month)
```

### Feedback Validation
```c
- Length: 0-200 characters
- Commas allowed (preserved in CSV)
- Special characters allowed
```

---

**Common Issues:**
```bash
# Error: Command not found
Solution: Install GCC compiler

# Error: Permission denied
Solution: chmod +x review_system

# Error: File not found
Solution: Ensure all 4 files in same directory
```